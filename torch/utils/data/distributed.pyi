from typing import TypeVar, Optional, Iterable
from . import Sampler, SequentialSampler, RandomSampler, Dataset, IterableDataset

T_co = TypeVar('T_co', covariant=True)
class DistributedSampler(Sampler[T_co]):
    def __init__(self, dataset: Dataset, num_replicas: Optional[int]=..., rank: Optional[int]=..., shuffle: Optional[bol]=..., length: Optional[int]=..., padding: Optional[bool]=...): ...
    def __iter__(self) -> Iterable[int]: ...
    def __len__(self) -> int: ...
    def set_rank(self, rank: Any) -> None: ...
    def set_epoch(self, epoch: int) -> None: ...

class ChunkDataReader:
    def __init__(self) -> None: ...
    def __call__(self, idx: Any) -> None: ...

class DistributedChunkSampler(Sampler[int]):
    world_size: Any = ...
    rank: Any = ...
    num_chunks: Any = ...
    shuffle: Any = ...
    sampler: Any = ...
    def __init__(self, world_size: Any, rank: Any, num_chunks: Any, shuffle: Any, sampler: Any) -> None: ...
    def __iter__(self) -> None: ...
    def __len__(self) -> None: ...
    def set_rank(self, rank: Any) -> None: ...
    def set_epoch(self, epoch: Any) -> None: ...
